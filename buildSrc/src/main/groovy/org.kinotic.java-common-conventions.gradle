plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'io.freefair.lombok'
    id 'io.spring.dependency-management'
}

group 'org.kinotic'
version = "${continuumVersion}"
sourceCompatibility = '21'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "io.opentelemetry:opentelemetry-bom:${otelBomVersion}"
        mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${otelInstrumentationBomVersion}"
    }
    dependencies {
        dependency "ch.qos.logback:logback-core:${logbackVersion}"
        dependency "ch.qos.logback:logback-classic:${logbackVersion}"

        dependency "commons-io:commons-io:${commonsIoVersion}"

        dependency "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        dependency "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        dependency "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
        dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

        // Override netty versions so we can patch security issues
        // This needs to be the complete list used by vertx
        dependency "io.netty:netty-buffer:${nettyVersion}"
        dependency "io.netty:netty-codec-http2:${nettyVersion}"
        dependency "io.netty:netty-codec-http:${nettyVersion}"
        dependency "io.netty:netty-common:${nettyVersion}"
        dependency "io.netty:netty-handler-proxy:${nettyVersion}"
        dependency "io.netty:netty-handler:${nettyVersion}"
        dependency "io.netty:netty-resolver-dns:${nettyVersion}"
        dependency "io.netty:netty-resolver:${nettyVersion}"
        dependency "io.netty:netty-transport:${nettyVersion}"

        dependency "io.vertx:vertx-core:${vertxVersion}"
        dependency "io.vertx:vertx-web:${vertxVersion}"
        dependency "io.vertx:vertx-web-client:${vertxVersion}"
        dependency "io.vertx:vertx-auth-common:${vertxVersion}"
        dependency "io.vertx:vertx-mqtt:${vertxVersion}"
        dependency "io.vertx:vertx-ignite:${vertxVersion}"
        dependency "io.vertx:vertx-reactive-streams:${vertxVersion}"
        dependency "io.vertx:vertx-web-graphql:${vertxVersion}"
        dependency "io.vertx:vertx-health-check:${vertxVersion}"

        dependency "javax.annotation:javax.annotation-api:${javaxAnnotationApi}"
        dependency "javax.cache:cache-api:${jCacheApiVersion}"

        dependency "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
        dependency "org.apache.commons:commons-text:${apacheCommonsTextVersion}"

        dependency "org.apache.ignite:ignite-core:${igniteVersion}"
        dependency "org.apache.ignite:ignite-indexing:${igniteVersion}"
        dependency "org.apache.ignite:ignite-calcite:${igniteVersion}"
        dependency "org.apache.ignite:ignite-spring:${igniteVersion}"
        dependency "org.apache.ignite:ignite-slf4j:${igniteVersion}"
        dependency "org.apache.ignite:ignite-kubernetes:${igniteVersion}"

        dependency "net.jodah:failsafe:${failsafeVersion}"

        dependency "org.apache.groovy:groovy:${groovyVersion}"

        dependency "org.kinotic:vertx-stomp-lite:${vertxStompLiteVersion}"

        dependency "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    }
}



dependencies {

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-text'

    implementation 'ch.qos.logback:logback-core'
    implementation 'ch.qos.logback:logback-classic'

    implementation 'io.opentelemetry:opentelemetry-api'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations'

    // Add aspectj weaver dependency for use during tests
    agent "org.aspectj:aspectjweaver:$aspectJVersion"

    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    environment('JAVA_TOOL_OPTIONS', "-javaagent:${configurations.agent.singleFile} --add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED --add-opens=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED --add-opens=java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED")
}
